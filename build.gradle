plugins {
    id 'application'
}

application {
    mainClass = 'Main'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

run {
    standardInput = System.in
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    intTestImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    intTestImplementation 'org.mockito:mockito-core:5.11.0'
    intTestRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Main-Class': 'Main'
    }
    archiveBaseName = 'client04'
}

tasks.register('copyToBin', Copy) {
    dependsOn jar
    from 'build/libs'
    into 'bin'
    include '*.jar'
}

tasks.register('deleteBin', Delete){
    delete 'bin'
}

jar.finalizedBy('copyToBin')
clean.finalizedBy('deleteBin')


tasks.register('cleanOldLogFiles') {
    doLast {
        def logDir = file('binaries/logArchive')
        logDir.mkdirs()

        fileTree(dir: 'src/intTest', include: 'log_game_*.txt').each { file ->
            file.renameTo(new File(logDir, file.name))
            println("Moved log file: ${file.name}")
        }

        def logFiles = logDir.listFiles().findAll { it.isFile() && it.name.startsWith('log_game_') }

        logFiles.sort { -it.lastModified() } // Sort in descending order

        def keepCount = 50
        def filesToDelete = logFiles.take(logFiles.size() - keepCount)

        filesToDelete.each { file ->
            file.delete()
            println("Deleted old log file: ${file.name}")
        }
    }
}

intTestClasses.finalizedBy(cleanOldLogFiles)